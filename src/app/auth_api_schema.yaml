swagger: '2.0'
info:
  title: Auth API
  description: "Сервис для авторизации и аутентификации пользователей."
  version: v1
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header  
security:
  - Bearer: []
paths:
  /user/sign_in:
    post:
      operationId: user_sign_in_create
      description: "Логин пользователя."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RequesrSigIn'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TokensResponse'
        '401':
          description: ''
          schema:
            $ref: '#/definitions/Unauth'
      tags:
        - User
    parameters: []
  /user/sign_out:
    post:
      operationId: user_sign_out_create
      description: "Логаут пользователя."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RequestSignOut'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseSignOut'
      tags:
        - User
    parameters: []
  /user/sign_up:
    post:
      operationId: user_sign_up_create
      description: "Создание нового пользователя."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/Request'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseOk'
        '409':
          description: ''
          schema:
            $ref: '#/definitions/ResponseCONF'
      tags:
        - User
    parameters: []
  /v1/access/role:
    get:
      operationId: v1_access_role_list
      description: "Получение списка всех ролей."
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/GetRole'
      tags:
        - Access
    post:
      operationId: v1_access_role_create
      description: "Создание новой роли."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RoleRequest'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/RoleCreated'
        '409':
          description: ''
          schema:
            $ref: '#/definitions/RoleAlrExist'
      tags:
        - Access
    patch:
      operationId: v1_access_role_partial_update
      description: "Изменение роли."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RolePatch'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/RoleUpdated'
        '409':
          description: ''
          schema:
            $ref: '#/definitions/RoleNotExist'
      tags:
        - Access
    delete:
      operationId: v1_access_role_delete
      description: "Удаление роли."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RoleRequest'
      responses:
        '201':
          description: ''
          schema:
            $ref: '#/definitions/RoleDeleted'
        '409':
          description: ''
          schema:
            $ref: '#/definitions/RoleNotExist'
      tags:
        - Access
    parameters: []
  /v1/user/change:
    post:
      operationId: v1_user_change_create
      description: "Изменение параметров пользователя."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RequestCUP'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseCPU'
        '409':
          description: ''
          schema:
            $ref: '#/definitions/ResponseCONF'
      tags:
        - User
    parameters: []
  /v1/user/history:
    get:
      operationId: v1_user_history_read
      description: "Получение списка логов (успешных сеансов аутентификации) пользователя."
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseHistory'
      tags:
        - User
    parameters: []
  /v1/user/refresh:
    get:
      operationId: v1_user_refresh_read
      description: "Обновление refresh токена."
      parameters: []
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/TokensResponse'
      tags:
        - User
    parameters: []
  /v1/user/role:
    post:
      operationId: v1_user_role_create
      description: "Добавление роли пользователю."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RequestRM'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseRMPost'
      tags:
        - User
    delete:
      operationId: v1_user_role_delete
      description: "Удаление роли пользователя."
      parameters:
        - name: data
          in: body
          required: true
          schema:
            $ref: '#/definitions/RequestRM'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/ResponseRMDelete'
      tags:
        - User
    parameters: []
definitions:
  RequesrSigIn:
    required:
      - login
      - password
    type: object
    properties:
      login:
        title: Login
        description: The user's login
        type: string
        minLength: 1
      password:
        title: Password
        description: The user's password
        type: string
        minLength: 1
  TokensResponse:
    required:
      - access_token
      - refresh_token
    type: object
    properties:
      access_token:
        title: Access token
        type: string
        minLength: 1
      refresh_token:
        title: Refresh token
        type: string
        minLength: 1
  Unauth:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: invalid credentials
        minLength: 1
  RequestSignOut:
    type: object
    properties:
      form_all_places:
        title: Form all places
        description: Logout from all places
        type: boolean
  ResponseSignOut:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: Refresh token revoked
        minLength: 1
  Request:
    required:
      - login
      - password
      - email
    type: object
    properties:
      login:
        title: Login
        description: The user's login
        type: string
        minLength: 1
      password:
        title: Password
        description: The user's password
        type: string
        minLength: 1
      first_name:
        title: First name
        description: The user's first_name
        type: string
        minLength: 1
      last_name:
        title: Last name
        description: The user's last_name
        type: string
        minLength: 1
      email:
        title: Email
        description: The user's email
        type: string
        minLength: 1
  ResponseOk:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: user created successfully
        minLength: 1
  ResponseCONF:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: choose another login
        minLength: 1
  RoleModel:
    required:
      - id
      - title
    type: object
    properties:
      id:
        title: Id
        type: string
        minLength: 1
      title:
        title: Title
        type: string
        minLength: 1
  GetRole:
    required:
      - roles
    type: object
    properties:
      roles:
        type: array
        items:
          $ref: '#/definitions/RoleModel'
  RoleRequest:
    required:
      - title
    type: object
    properties:
      title:
        title: Title
        description: The role's title
        type: string
        minLength: 1
  RoleCreated:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role created
        minLength: 1
  RoleAlrExist:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role already exists
        minLength: 1
  RolePatch:
    required:
      - title
      - new_title
    type: object
    properties:
      title:
        title: Title
        description: The role's current title
        type: string
        minLength: 1
      new_title:
        title: New title
        description: The role's new title
        type: string
        minLength: 1
  RoleUpdated:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role updated
        minLength: 1
  RoleNotExist:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role does not exist
        minLength: 1
  RoleDeleted:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role deleted
        minLength: 1
  RequestCUP:
    type: object
    properties:
      new_login:
        title: New login
        description: New user's login
        type: string
        minLength: 1
      new_password:
        title: New password
        description: New user's password
        type: string
        minLength: 1
  ResponseCPU:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: successfully changed
        minLength: 1
  History:
    required:
      - event_date
      - fingerprint
      - user_id
    type: object
    properties:
      event_date:
        title: Event date
        type: string
        format: date-time
      fingerprint:
        title: Fingerprint
        type: string
        minLength: 1
      user_id:
        title: User id
        type: string
        minLength: 1
  ResponseHistory:
    required:
      - events
    type: object
    properties:
      events:
        type: array
        items:
          $ref: '#/definitions/History'
  RequestRM:
    required:
      - user_id
      - role_id
    type: object
    properties:
      user_id:
        title: User id
        type: string
        minLength: 1
      role_id:
        title: Role id
        type: string
        minLength: 1
  ResponseRMPost:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role added
        minLength: 1
  ResponseRMDelete:
    type: object
    properties:
      message:
        title: Message
        type: string
        default: role deleted
        minLength: 1